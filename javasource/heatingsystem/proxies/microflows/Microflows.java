// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package heatingsystem.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	/**
	 * @deprecated
	 * The default constructor of the Microflows class should not be used.
	 * Use the static microflow invocation methods instead.
	 */
	@java.lang.Deprecated(since = "9.12", forRemoval = true)
	public Microflows() {}

	// These are the microflows for the HeatingSystem module
	public static void aCT_ApproveCustomerRequest(IContext context, heatingsystem.proxies.Customer _customer)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Customer", _customer == null ? null : _customer.getMendixObject());
		Core.microflowCall("HeatingSystem.ACT_ApproveCustomerRequest").withParams(params).execute(context);
	}
	public static void aCT_AssignTechnician(IContext context, heatingsystem.proxies.ServiceRequest _serviceRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ServiceRequest", _serviceRequest == null ? null : _serviceRequest.getMendixObject());
		Core.microflowCall("HeatingSystem.ACT_AssignTechnician").withParams(params).execute(context);
	}
	public static void aCT_DeleteAllServiceRequestData(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("HeatingSystem.ACT_DeleteAllServiceRequestData").withParams(params).execute(context);
	}
	public static void aCT_DeleteFile(IContext context, heatingsystem.proxies.File _file, heatingsystem.proxies.ServiceRequest _serviceRequest, heatingsystem.proxies.TechnicianTask _technicianTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("File", _file == null ? null : _file.getMendixObject());
		params.put("ServiceRequest", _serviceRequest == null ? null : _serviceRequest.getMendixObject());
		params.put("TechnicianTask", _technicianTask == null ? null : _technicianTask.getMendixObject());
		Core.microflowCall("HeatingSystem.ACT_DeleteFile").withParams(params).execute(context);
	}
	public static void aCT_DeleteServiceRequest(IContext context, heatingsystem.proxies.ServiceRequest _serviceRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ServiceRequest", _serviceRequest == null ? null : _serviceRequest.getMendixObject());
		Core.microflowCall("HeatingSystem.ACT_DeleteServiceRequest").withParams(params).execute(context);
	}
	public static void aCT_GenerateInvoice(IContext context, heatingsystem.proxies.ServiceRequest _serviceRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ServiceRequest", _serviceRequest == null ? null : _serviceRequest.getMendixObject());
		Core.microflowCall("HeatingSystem.ACT_GenerateInvoice").withParams(params).execute(context);
	}
	public static void aCT_InitiateTechnicianTask(IContext context, heatingsystem.proxies.ServiceRequest _serviceRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ServiceRequest", _serviceRequest == null ? null : _serviceRequest.getMendixObject());
		Core.microflowCall("HeatingSystem.ACT_InitiateTechnicianTask").withParams(params).execute(context);
	}
	public static void aCT_InitiateWorkOrder(IContext context, heatingsystem.proxies.ServiceRequest _serviceRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ServiceRequest", _serviceRequest == null ? null : _serviceRequest.getMendixObject());
		Core.microflowCall("HeatingSystem.ACT_InitiateWorkOrder").withParams(params).execute(context);
	}
	public static void aCT_InititeServiceRequest(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("HeatingSystem.ACT_InititeServiceRequest").withParams(params).execute(context);
	}
	public static void aCT_RegisterUser(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("HeatingSystem.ACT_RegisterUser").withParams(params).execute(context);
	}
	public static void act_saveFile(IContext context, heatingsystem.proxies.ServiceRequest _serviceRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ServiceRequest", _serviceRequest == null ? null : _serviceRequest.getMendixObject());
		Core.microflowCall("HeatingSystem.Act_saveFile").withParams(params).execute(context);
	}
	public static void aCT_SaveTechnicianTask(IContext context, heatingsystem.proxies.ServiceRequest _serviceRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ServiceRequest", _serviceRequest == null ? null : _serviceRequest.getMendixObject());
		Core.microflowCall("HeatingSystem.ACT_SaveTechnicianTask").withParams(params).execute(context);
	}
	public static void aCT_SaveWorkOrder(IContext context, heatingsystem.proxies.WorkOrder _workOrder, heatingsystem.proxies.ServiceRequest _serviceRequest, heatingsystem.proxies.Customer _customer)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkOrder", _workOrder == null ? null : _workOrder.getMendixObject());
		params.put("ServiceRequest", _serviceRequest == null ? null : _serviceRequest.getMendixObject());
		params.put("Customer", _customer == null ? null : _customer.getMendixObject());
		Core.microflowCall("HeatingSystem.ACT_SaveWorkOrder").withParams(params).execute(context);
	}
	public static void aCT_SubmitRegistration(IContext context, heatingsystem.proxies.Customer _customer, administration.proxies.AccountPasswordData _accountPasswordData)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Customer", _customer == null ? null : _customer.getMendixObject());
		params.put("AccountPasswordData", _accountPasswordData == null ? null : _accountPasswordData.getMendixObject());
		Core.microflowCall("HeatingSystem.ACT_SubmitRegistration").withParams(params).execute(context);
	}
	public static void aCT_SubmitServiceRequest(IContext context, heatingsystem.proxies.ServiceRequest _serviceRequest, heatingsystem.proxies.Customer _customer)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ServiceRequest", _serviceRequest == null ? null : _serviceRequest.getMendixObject());
		params.put("Customer", _customer == null ? null : _customer.getMendixObject());
		Core.microflowCall("HeatingSystem.ACT_SubmitServiceRequest").withParams(params).execute(context);
	}
	public static void cWS_OpenWeather(IContext context, heatingsystem.proxies.City _city)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("City", _city == null ? null : _city.getMendixObject());
		Core.microflowCall("HeatingSystem.CWS_OpenWeather").withParams(params).execute(context);
	}
	public static heatingsystem.proxies.File dS_CreateFile(IContext context, heatingsystem.proxies.ServiceRequest _serviceRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ServiceRequest", _serviceRequest == null ? null : _serviceRequest.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("HeatingSystem.DS_CreateFile").withParams(params).execute(context);
		return result == null ? null : heatingsystem.proxies.File.initialize(context, result);
	}
	public static java.util.List<heatingsystem.proxies.ServiceRequest> dS_RetrieveCustomerRequest(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> objs = Core.microflowCall("HeatingSystem.DS_RetrieveCustomerRequest").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> heatingsystem.proxies.ServiceRequest.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.util.List<heatingsystem.proxies.File> dS_RetrieveFile(IContext context, heatingsystem.proxies.ServiceRequest _serviceRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ServiceRequest", _serviceRequest == null ? null : _serviceRequest.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("HeatingSystem.DS_RetrieveFile").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> heatingsystem.proxies.File.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.util.List<administration.proxies.Account> dS_RetrieveTechnician(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> objs = Core.microflowCall("HeatingSystem.DS_RetrieveTechnician").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> administration.proxies.Account.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static boolean vAL_RegistrationPage(IContext context, heatingsystem.proxies.Customer _customer, administration.proxies.AccountPasswordData _accountPasswordData)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Customer", _customer == null ? null : _customer.getMendixObject());
		params.put("AccountPasswordData", _accountPasswordData == null ? null : _accountPasswordData.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("HeatingSystem.VAL_RegistrationPage").withParams(params).execute(context);
	}
	public static boolean vAL_ServiceRequest(IContext context, heatingsystem.proxies.ServiceRequest _serviceRequest, heatingsystem.proxies.Equipment _equipment, heatingsystem.proxies.Customer _customer)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ServiceRequest", _serviceRequest == null ? null : _serviceRequest.getMendixObject());
		params.put("Equipment", _equipment == null ? null : _equipment.getMendixObject());
		params.put("Customer", _customer == null ? null : _customer.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("HeatingSystem.VAL_ServiceRequest").withParams(params).execute(context);
	}
	public static boolean vAL_WorkOrder(IContext context, heatingsystem.proxies.WorkOrder _workOrder)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkOrder", _workOrder == null ? null : _workOrder.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("HeatingSystem.VAL_WorkOrder").withParams(params).execute(context);
	}
}
